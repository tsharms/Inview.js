{"version":3,"file":"inview-observer.module.js","sources":["../src/inview-observer.js"],"sourcesContent":["/*------------------------------------------------------------------------*/\n/*  SIMPLE INVIEW PLUGIN\n/*------------------------------------------------------------------------*/\n\nconst Inview = (() => {\n    let settings;\n    let observer;\n\n    const defaults = {\n        element: '.js-inview-element',\n        observerOptions: {\n            rootMargin: '0px 0px',\n            threshold: 0.5\n        },\n        data: {\n            delay: 'data-inview-delay'\n        },\n        classes: {\n            inview: 'is-inview'\n        }\n    };\n\n    /**\n     * Check is element is in view\n     * If element is in view add a class to it\n     * Also checks if element has delay data attribute\n     */\n    const checkInView = entries => {\n\n        entries.forEach(entry => {\n            const { isIntersecting, target } = entry;\n\n            if (isIntersecting) {\n                const delay = target.getAttribute(settings.data.delay);\n\n                observer.unobserve(target);\n\n                if(delay) {\n                    setTimeout(() => {\n                        target.classList.add(settings.classes.inview);    \n                    }, parseInt(delay));\n                } else {\n                    target.classList.add(settings.classes.inview);\n                }\n            }\n        });\n    };\n\n    /**\n     * Bind all events to make a whole block clickable\n     */\n    const _bindEvents = () => {\n        window.addEventListener('inview-reinit', _setup);\n    };\n \n    /**\n     * Setup link plugin\n     */\n    const _setup = () => {\n        const inviewElements = document.querySelectorAll(settings.element);\n        const options = settings.observerOptions;\n\n\t\tobserver = new IntersectionObserver(checkInView, options);\n\n        inviewElements.forEach(element => {\n            observer.observe(element);\n        });\n\n\t\t_bindEvents();\n    };\n\n    /**\n     * Cleanup plugin variables and remove event listeners \n     */\n    const destroy = () => {\n        settings = {};\n        observer = false;\n\n        window.removeEventListener('inview-reinit', _setup);\n    }\n\n    /**\n     * Init plugin and checks if there are link element\n     * \n     * @param {Object} options This object overrides defaults\n     */\n    const init = options => {\n        // Setup settings.\n        options = options || {};\n        settings = {...defaults, ...options};\n\n        _setup();\n    };\n\n    // Return an object exposed to the public\n    return { init, destroy, checkInView };\n});\n\nexport default Inview;\n"],"names":["Inview","settings","observer","element","observerOptions","rootMargin","threshold","data","delay","classes","inview","checkInView","entries","forEach","entry","target","isIntersecting","getAttribute","unobserve","setTimeout","classList","add","parseInt","_setup","document","querySelectorAll","IntersectionObserver","inviewElements","observe","window","addEventListener","init","options","defaults","destroy","removeEventListener"],"mappings":"oOAIMA,IAAMA,EAAI,WACZ,IAAYC,EACRC,IAEa,CACbC,QAAS,qBACTC,gBAAiB,CACbC,WAAY,UACZC,UAAW,IAEfC,KAAM,CACFC,MAAO,qBAEXC,QAAS,CACLC,OAAQ,cASVC,EAAc,SAAAC,GAEhBA,EAAQC,QAAQ,SAAAC,GACZ,IAAwBC,EAAWD,EAAXC,OAExB,GAFmCD,EAA3BE,eAEY,CAChB,IAAWR,EAAGO,EAAOE,aAAahB,EAASM,KAAKC,OAEhDN,EAASgB,UAAUH,GAEhBP,EACCW,WAAW,WACPJ,EAAOK,UAAUC,IAAIpB,EAASQ,QAAQC,OAC1C,EAAGY,SAASd,IAEZO,EAAOK,UAAUC,IAAIpB,EAASQ,QAAQC,OAE9C,CACJ,EACJ,EAYYa,EAAG,WACX,MAAuBC,SAASC,iBAAiBxB,EAASE,SAGhED,EAAW,IAAIwB,qBAAqBf,EAFdV,EAASG,iBAIzBuB,EAAed,QAAQ,SAAAV,GACnBD,EAAS0B,QAAQzB,EACrB,GAdA0B,OAAOC,iBAAiB,gBAAiBP,EAiB7C,EA0BA,MAAO,CAAEQ,KATI,SAAAC,GAGT/B,EAAegC,EAAAA,CAAAA,EAAAA,EADfD,EAAUA,GAAW,IAGrBT,GACJ,EAGeW,QArBC,WACZjC,EAAW,CAAA,EACXC,GAAW,EAEX2B,OAAOM,oBAAoB,gBAAiBZ,EAChD,EAgBwBZ,YAAAA,EAC5B"}