function e(){return e=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},e.apply(this,arguments)}const t=()=>{let t,n;const i={element:".js-inview-element",observerOptions:{rootMargin:"0px 0px",threshold:.5},data:{delay:"data-inview-delay"},classes:{inview:"is-inview"}},s=e=>{e.forEach(e=>{const{isIntersecting:i,target:s}=e;if(i){const e=s.getAttribute(t.data.delay);n.unobserve(s),e?setTimeout(()=>{s.classList.add(t.classes.inview)},parseInt(e)):s.classList.add(t.classes.inview)}})},r=()=>{const e=document.querySelectorAll(t.element);n=new IntersectionObserver(s,t.observerOptions),e.forEach(e=>{n.observe(e)}),window.addEventListener("inview-reinit",r)};return{init:n=>{t=e({},i,n=n||{}),r()},destroy:()=>{t={},n=!1,window.removeEventListener("inview-reinit",r)},checkInView:s}};export{t as default};
//# sourceMappingURL=inview-observer.modern.mjs.map
