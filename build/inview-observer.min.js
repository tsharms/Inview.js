!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e||self).inviewObserverJs=n()}(this,function(){function e(){return e=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},e.apply(this,arguments)}return function(){var n,t,i={element:".js-inview-element",observerOptions:{rootMargin:"0px 0px",threshold:.5},data:{delay:"data-inview-delay"},classes:{inview:"is-inview"}},r=function(e){e.forEach(function(e){var i=e.target;if(e.isIntersecting){var r=i.getAttribute(n.data.delay);t.unobserve(i),r?setTimeout(function(){i.classList.add(n.classes.inview)},parseInt(r)):i.classList.add(n.classes.inview)}})},o=function(){var e=document.querySelectorAll(n.element);t=new IntersectionObserver(r,n.observerOptions),e.forEach(function(e){t.observe(e)}),window.addEventListener("inview-reinit",o)};return{init:function(t){n=e({},i,t=t||{}),o()},destroy:function(){n={},t=!1,window.removeEventListener("inview-reinit",o)},checkInView:r}}});
//# sourceMappingURL=inview-observer.min.js.map
