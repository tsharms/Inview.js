{"version":3,"file":"inview.modern.mjs","sources":["../src/inview.js"],"sourcesContent":["/*------------------------------------------------------------------------*/\n/*  SIMPLE INVIEW PLUGIN\n/*------------------------------------------------------------------------*/\n\nconst Inview = (() => {\n    let settings;\n    let observer;\n\n    const defaults = {\n        element: '.js-inview-element',\n        observerOptions: {\n            rootMargin: '0px 0px',\n            threshold: 0.5\n        },\n        data: {\n            delay: 'data-inview-delay'\n        },\n        classes: {\n            inview: 'is-inview'\n        }\n    };\n\n    /**\n     * Check is element is in view\n     * If element is in view add a class to it\n     * Also checks if element has delay data attribute\n     */\n    const checkInView = entries => {\n\n        entries.forEach(entry => {\n            const { isIntersecting, target } = entry;\n\n            if (isIntersecting) {\n                const delay = target.getAttribute(settings.data.delay);\n\n                observer.unobserve(target);\n\n                if(delay) {\n                    setTimeout(() => {\n                        target.classList.add(settings.classes.inview);    \n                    }, parseInt(delay));\n                } else {\n                    target.classList.add(settings.classes.inview);\n                }\n            }\n        });\n    };\n\n    /**\n     * Bind all events to make a whole block clickable\n     */\n    const _bindEvents = () => {\n        window.addEventListener('inview-reinit', _setup);\n    };\n \n    /**\n     * Setup link plugin\n     */\n    const _setup = () => {\n        const inviewElements = document.querySelectorAll(settings.element);\n        const options = settings.observerOptions;\n\n\t\tobserver = new IntersectionObserver(checkInView, options);\n\n        inviewElements.forEach(element => {\n            observer.observe(element);\n        });\n\n\t\t_bindEvents();\n    };\n\n    /**\n     * Cleanup plugin variables and remove event listeners \n     */\n    const destroy = () => {\n        settings = {};\n        observer = false;\n\n        window.removeEventListener('inview-reinit', _setup);\n    }\n\n    /**\n     * Init plugin and checks if there are link element\n     * \n     * @param {Object} options This object overrides defaults\n     */\n    const init = options => {\n        // Setup settings.\n        options = options || {};\n        settings = {...defaults, ...options};\n\n        _setup();\n    };\n\n    // Return an object exposed to the public\n    return { init, destroy, checkInView };\n});\n\nexport default Inview;\n"],"names":["Inview","settings","observer","defaults","element","observerOptions","rootMargin","threshold","data","delay","classes","inview","checkInView","entries","forEach","entry","isIntersecting","target","getAttribute","unobserve","setTimeout","classList","add","parseInt","_setup","inviewElements","document","querySelectorAll","IntersectionObserver","observe","window","addEventListener","init","options","destroy","removeEventListener"],"mappings":"oOAIMA,MAAMA,EAAI,KACZ,IAAIC,EACQC,EAEZ,MAAMC,EAAW,CACbC,QAAS,qBACTC,gBAAiB,CACbC,WAAY,UACZC,UAAW,IAEfC,KAAM,CACFC,MAAO,qBAEXC,QAAS,CACLC,OAAQ,cASVC,EAAcC,IAEhBA,EAAQC,QAAQC,IACZ,MAAMC,eAAEA,EAAcC,OAAEA,GAAWF,EAEnC,GAAIC,EAAgB,CAChB,MAAWP,EAAGQ,EAAOC,aAAajB,EAASO,KAAKC,OAEhDP,EAASiB,UAAUF,GAEhBR,EACCW,WAAW,KACPH,EAAOI,UAAUC,IAAIrB,EAASS,QAAQC,OAAM,EAC7CY,SAASd,IAEZQ,EAAOI,UAAUC,IAAIrB,EAASS,QAAQC,OAE9C,GACH,EAaOa,EAAG,KACX,MAAMC,EAAiBC,SAASC,iBAAiB1B,EAASG,SAGhEF,EAAW,IAAwB0B,qBAAChB,EAFdX,EAASI,iBAIzBoB,EAAeX,QAAQV,IACnBF,EAAS2B,QAAQzB,EAAO,GAb5B0B,OAAOC,iBAAiB,gBAAiBP,EAiB7C,EA0BA,MAAO,CAAEQ,KATIC,IAGThC,EAAeE,EAAAA,GAAAA,EADf8B,EAAUA,GAAW,CAAE,GAGvBT,GAAM,EAIKU,QArBC,KACZjC,EAAW,CAAA,EACXC,GAAW,EAEX4B,OAAOK,oBAAoB,gBAAiBX,EAChD,EAgBwBZ,cAAY"}